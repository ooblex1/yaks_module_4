https://thayer.github.io/engs50/Notes/malloc/
2
19038
<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Dynamic memory allocation; linked lists</title>
  <meta name="description" content="In Engs 50 you will learn how to design & build large, reliable, maintainable, and understandable software systems.  In the process you will learn to program in C with Unix development tools.
">

  <link rel="shortcut icon" href="/engs50/50.png" />
  <link rel="stylesheet" href="/engs50/css/main.css">
  <link rel="canonical" href="/engs50/Notes/malloc/">
</head>


  <body>

    <header class="site-header">

    <a class="site-title" href="/engs50/">
      <img width=48 align=center src="/engs50/50.png" alt="icon">
      Engs50 (CS50)
    </a>

    <nav class="site-nav">
      [<a href="/engs50/Labs/">Labs</a>]
      [<a href="/engs50/Notes/">Notes</a>]
      [<a href="/engs50/Reading/">Reading</a>]
      [<a href="/engs50/Resources/">Resources</a>]
			[<a href="/engs50/Examples/">Examples</a>]
   </nav>

</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post">

  <header class="post-header">
    <h1 class="post-title">Dynamic memory allocation; linked lists</h1>
  </header>

  <div class="post-content">
    <h3 id="goals">Goals</h3>

<ul>
  <li>To understand that <code class="highlighter-rouge">malloc</code> and <code class="highlighter-rouge">free</code> allocate and de-allocate memory from the heap.</li>
  <li>To use dynamic memory to build a linked list.</li>
</ul>

<p>Terminal <a href="/engs50/Notes/malloc/script.txt">script</a> from today’s class.</p>

<h3 id="background">Background</h3>

<p>We’ll be working with C code that builds and manipulates <em>linked lists</em>.
You learned about linked lists in CS10, and may want to review the CS10 linked-list notes and implementation:</p>

<ul>
  <li>slides in <a href="/engs50/Notes/malloc/cs10-lists.pdf">pdf</a> or <a href="/engs50/Notes/malloc/cs10-lists.pptx">Powerpoint</a></li>
  <li><a href="/engs50/Notes/malloc/SinglyLinked.java">SinglyLinked.java</a></li>
  <li><a href="/engs50/Notes/malloc/SimpleList.java">SimpleList.java</a></li>
</ul>

<h1 id="dynamic-memory-allocation">Dynamic memory allocation</h1>

<p>Before we dive in, check out this <a href="https://www.youtube.com/watch?v=5VnDaHBi8dM">animated explanation of pointers</a>.
Fun!</p>

<p>C does not have language support for dynamically allocating new ‘things’.
Instead, the programmer has to call a library function called <code class="highlighter-rouge">malloc()</code> to allocate a new chunk of memory from the <em>heap segment</em>, and later call <code class="highlighter-rouge">free()</code> to return that chunk of memory to the heap.
The programmer has to remember to initialize the chunk of bytes received from <code class="highlighter-rouge">malloc()</code> – which otherwise should be assumed to contain random data.
The programmer has to be careful allocate a large enough chunk to hold the data she intends to store there, and not to use pointers to write “outside” that chunk of memory.
Lots of flexibility and power - but as with any great power, you must take great care in using it.</p>

<blockquote>
  <p>In Java, you can use <code class="highlighter-rouge">new</code> to dynamically create a new object, and <code class="highlighter-rouge">delete</code> to discard an object created with <code class="highlighter-rouge">new</code>, but for the most part the Java compiler and runtime handles object deletion and memory recovery automatically - it’s called ‘garbage collection.’</p>
</blockquote>

<p>There are four related functions you should understand:</p>

<ul>
  <li><strong>malloc</strong> <code class="highlighter-rouge">p = malloc(n)</code> - allocates <code class="highlighter-rouge">n</code> bytes of heap memory; the memory contents remain uninitialized.</li>
  <li><strong>calloc</strong> <code class="highlighter-rouge">p = calloc(count, size)</code> allocates <code class="highlighter-rouge">count*size</code> bytes of heap memory and initializes it all to zero; this call is appropriate when you want to allocate an array of <code class="highlighter-rouge">count</code> items, each of <code class="highlighter-rouge">size</code> bytes.</li>
  <li><strong>realloc</strong> <code class="highlighter-rouge">p = realloc(p, n)</code> - where <code class="highlighter-rouge">p</code> is a pointer to heap memory - expands (or shrinks) its allocation to <code class="highlighter-rouge">n</code> bytes.</li>
  <li><strong>free</strong> <code class="highlighter-rouge">free(p)</code> - where <code class="highlighter-rouge">p</code> is a pointer to heap memory - releases that portion of heap memory for future use.</li>
</ul>

<p>Our examples today show how to use <code class="highlighter-rouge">malloc</code> to allocate space to store a string, and later, a <code class="highlighter-rouge">struct</code> holding aggregate types.
For an example using <code class="highlighter-rouge">calloc</code> and <code class="highlighter-rouge">realloc</code>, read about <a href="/malloc/readlinep.html">how readlinep() works</a>.</p>

<h2 id="memory-leaks-and-stray-pointers">Memory leaks and stray pointers</h2>

<p><strong><em>For every <code class="highlighter-rouge">malloc</code> there must be a matching <code class="highlighter-rouge">free</code>.</em></strong></p>

<ul>
  <li>If you allocate space but never free it, you’ve created a <em>memory leak</em>; as the program runs, the process memory size will grow and grow, and eventually run out of memory.</li>
  <li>If you free a pointer you’ve never allocated - or free the same pointer twice - you may cause the heap manager to corrupt its data structures and trigger a segmentation fault at some future time - often a seemingly random time.</li>
</ul>

<p>Whenever you write <code class="highlighter-rouge">malloc</code>, write the corresponding <code class="highlighter-rouge">free</code> call; or, document whose responsibility is to <code class="highlighter-rouge">free</code> that pointer.</p>

<p>Whenever you call <code class="highlighter-rouge">free(p)</code>, it’s good practice to immediately set <code class="highlighter-rouge">p=NULL</code>.
Not because you have to - it makes no difference to the heap - but because that step will prevent you from accidentally re-using that now-defunct pointer <code class="highlighter-rouge">p</code> - you’ll get a clean segmentation fault instead of unpredictable behavior.</p>

<blockquote>
  <p>When the process exits, all its memory is free - the four segments (code, global, stack, and heap) disappear.</p>
</blockquote>

<h2 id="coding-style---memory-allocation">Coding style - memory allocation</h2>

<p>Avoid sprinking calls to <code class="highlighter-rouge">malloc()</code> and <code class="highlighter-rouge">free()</code> throughout your code.
Instead, think about the kinds of things you need to create and destroy, and write type-specific wrapper for each such type.
For example, if your program manipulates things of type <code class="highlighter-rouge">struct listnode</code>, you would write two functions:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">struct</span> <span class="n">listnode</span> <span class="o">*</span><span class="n">listnode_new</span><span class="p">(...);</span>
    <span class="kt">void</span> <span class="n">listnode_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">listnode</span> <span class="o">*</span><span class="n">node</span><span class="p">);</span>
</code></pre></div></div>

<p>The first function calls <code class="highlighter-rouge">malloc(sizeof(struct listnode))</code> and initializes all of its contents, perhaps using parameters passed by the caller.
The second calls <code class="highlighter-rouge">free(node)</code>.
Both involve careful error-checking code.
See example <a href="/engs50/Examples/names7.c">names7.c</a>.</p>

<p>There are many advantages to this approach:</p>

<ul>
  <li>The mainline code is more readable, because it’s clear what <code class="highlighter-rouge">listnode_new()</code> is doing.</li>
  <li>The <code class="highlighter-rouge">new</code> function acts like a ‘constructor’ in object-oriented languages and can ensure the newly returned memory is initialized, or at least, not random bytes.</li>
  <li>Code involving <code class="highlighter-rouge">malloc</code> can sometimes be tricky, and you isolate that trickiness in one spot and focus on getting it right once.</li>
  <li>Some new types might need multiple <code class="highlighter-rouge">malloc</code> calls, as in our linked-list examples <a href="/engs50/Examples/names5.c">names5.c</a> <a href="/engs50/Examples/names6.c">names6.c</a> <a href="/engs50/Examples/names7.c">names7.c</a>.
All those <code class="highlighter-rouge">malloc</code> calls (and corresponding <code class="highlighter-rouge">free</code> calls) can be in the <code class="highlighter-rouge">new</code>/<code class="highlighter-rouge">free</code> functions.</li>
  <li>You can insert debugging output or reference-counting logic, or set debugger breakpoints, in these <code class="highlighter-rouge">new</code>/<code class="highlighter-rouge">free</code> functions and immediately have that feature apply to <em>all</em> occurrences of your program’s work with this type.</li>
</ul>

<h1 id="data-structures-in-c">Data structures in C</h1>

<p>C is not an object-oriented language like Java, Python, or C++.
It does not provide any language features to declare a ‘class’ or create and manipulate object ‘instances’ of that class.</p>

<p>But C does provide two kinds of aggregate data: arrays and structures.</p>

<h2 id="arrays">Arrays</h2>

<p>We’ve seen examples with arrays of characters (aka strings) and arrays of character pointers, and even two-dimensional arrays of characters.
But one can also define arrays of other types:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kt">char</span> <span class="n">names</span><span class="p">[</span><span class="n">NumStudents</span><span class="p">][</span><span class="n">NameLength</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">ages</span><span class="p">[</span><span class="n">NumStudents</span><span class="p">];</span>
	<span class="kt">float</span> <span class="n">grades</span><span class="p">[</span><span class="n">NumStudents</span><span class="p">];</span>
</code></pre></div></div>

<p>and so forth.</p>

<blockquote>
  <p>Sometimes you need to understand that an array name is, in effect, a pointer to the first spot in memory where that array’s data lives; thus, <code class="highlighter-rouge">ages</code> is of type <code class="highlighter-rouge">int*</code> and is a pointer to the first entry in the array, but <code class="highlighter-rouge">ages[0]</code> is of type <code class="highlighter-rouge">int</code> and is the value of that first entry in the array.
This concept comes up mostly in arrays of characters; <code class="highlighter-rouge">names</code> is of type <code class="highlighter-rouge">char**</code>, and even <code class="highlighter-rouge">names[0]</code> is of type <code class="highlighter-rouge">char*</code>, and <code class="highlighter-rouge">names[0][1]</code> is of type <code class="highlighter-rouge">char</code>.
In effect, <code class="highlighter-rouge">names</code> is an array of strings, and <code class="highlighter-rouge">names[0]</code> is the first string in the array; like other strings, <code class="highlighter-rouge">names[0]</code> is of type <code class="highlighter-rouge">char*</code>.</p>
</blockquote>

<h2 id="structs">Structs</h2>

<p>C allows you to define an aggregate called a ‘struct’; like an object, it has data members.
Unlike an object, it has no methods (function members).</p>

<p>Continuing our above example, we could have defined a <code class="highlighter-rouge">struct</code> for each student, and then an array of <code class="highlighter-rouge">structs</code>, as follows:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
       <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="n">NameLength</span><span class="p">];</span>
       <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
       <span class="kt">float</span> <span class="n">grade</span><span class="p">;</span>
   <span class="p">};</span>
   <span class="k">struct</span> <span class="n">student</span> <span class="n">students</span><span class="p">[</span><span class="n">NumStudents</span><span class="p">];</span>
</code></pre></div></div>

<p>Now we can refer to the first student as <code class="highlighter-rouge">student[0]</code>, the second student as <code class="highlighter-rouge">student[1]</code>, and so forth.
We can refer to the name of the first student as <code class="highlighter-rouge">student[0].name</code> and the age of the second student as <code class="highlighter-rouge">student[1].age</code>.</p>

<p>In our classtime examples, <a href="/engs50/Examples/names5.c">names5.c</a>, <a href="/engs50/Examples/names5.c">names6.c</a>, and <a href="/engs50/Examples/names7.c">names7.c</a>, we declare a <code class="highlighter-rouge">struct listnode</code> and use it to build a linked list.
There we see a different notation: instead of <code class="highlighter-rouge">.</code> to refer to a member of a struct, we have to use <code class="highlighter-rouge">-&gt;</code> to dereference the pointer and refer to member of the pointee.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">struct</span> <span class="n">student</span> <span class="n">alice</span><span class="p">;</span>        <span class="c1">// a single struct representing alice
</span>   <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">sp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">alice</span><span class="p">;</span> <span class="c1">// a pointer, initialized to point at alice
</span>
   <span class="c1">// the following three all do the same thing.
</span>   <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">alice</span><span class="p">.</span><span class="n">age</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">sp</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">sp</span><span class="p">).</span><span class="n">age</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="linked-lists">Linked lists</h2>

<p>In the examples below we construct a simple linked list comprising nodes that each have a pointer to a string and a pointer to the next node.
The list includes a dummy <em>head node</em> to simplify list management.
The variable <code class="highlighter-rouge">head</code> is a pointer to that dummy node.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A structure for each node in linked list
</span><span class="k">struct</span> <span class="n">listnode</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">listnode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">listnode</span> <span class="n">head</span> <span class="o">=</span> <span class="p">{</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">};</span> <span class="c1">// dummy node at head of empty list
</span></code></pre></div></div>

<p>After adding three nodes, the list might look like this:</p>

<p><img src="linked-list.png" alt="" /></p>

<h2 id="examples">Examples</h2>

<p>We first live-coded a simple revision of the <code class="highlighter-rouge">names</code> program, using an array of pointers instead of a two-dimensional array of characters:</p>

<ul>
  <li><a href="/engs50/Examples/names3.c">names3.c</a>: array of pointers; use of <code class="highlighter-rouge">readlinep</code></li>
</ul>

<p>Here, the two-dimensional <code class="highlighter-rouge">names</code> array is replaced by a one-dimensional array of string pointers, which is more common in C, and which allows the names to be of any length - each array entry points to a dynamically allocated memory from the heap, big enough to hold that name.</p>

<p>We use a new <code class="highlighter-rouge">freadlinep</code> function; after the next lecture, I recommend you read about its <a href="../readlinep.html">implementation</a>.</p>

<p>We don’t have time in class, but we can extend this code to sort the array using <code class="highlighter-rouge">qsort()</code> quicksort:</p>

<ul>
  <li><a href="/engs50/Examples/names4.c">names4.c</a>: sort names; <code class="highlighter-rouge">void*</code>; casting</li>
</ul>

<p>Then we live-coded a linked-list version of the <code class="highlighter-rouge">names</code> program:</p>

<ul>
  <li><a href="/engs50/Examples/names5.c">names5.c</a> -  revises names3.c to use linked list instead of array</li>
</ul>

<p>You should look at two more versions of the <code class="highlighter-rouge">names</code> program:</p>

<ul>
  <li><a href="/engs50/Examples/names6.c">names6.c</a> - extends names5.c to keep the list sorted</li>
  <li><a href="/engs50/Examples/names7.c">names7.c</a> - extends names6.c to remove duplicates</li>
</ul>

<h2 id="activity">Activity</h2>

<p>Today’s <a href="activity.html">activity</a> deletes the list.</p>

  </div>

</article>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">Engs50 (CS50) -- Dartmouth College</h2>

    <p> <font size=-1>
    	This version of the course is based upon those designed by
    	Professors Palmer, Kotz, Zhou, Campbell, and Balkcom.
	I am deeply indebted to these outstanding educators.
    -- <a href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen Taylor</a>
       </font>
    </p>
    <p><small>This page was last updated on <strong>2018-10-10</strong> at <strong>18:07</strong>.</small></p>
  </div>

</footer>


  </body>

</html>

