https://thayer.github.io/engs50/Labs/Lab5/
2
21943
<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Lab 5 - Indexer</title>
  <meta name="description" content="In Engs 50 you will learn how to design & build large, reliable, maintainable, and understandable software systems.  In the process you will learn to program in C with Unix development tools.
">

  <link rel="shortcut icon" href="/engs50/50.png" />
  <link rel="stylesheet" href="/engs50/css/main.css">
  <link rel="canonical" href="/engs50/Labs/Lab5/">
</head>


  <body>

    <header class="site-header">

    <a class="site-title" href="/engs50/">
      <img width=48 align=center src="/engs50/50.png" alt="icon">
      Engs50 (CS50)
    </a>

    <nav class="site-nav">
      [<a href="/engs50/Labs/">Labs</a>]
      [<a href="/engs50/Notes/">Notes</a>]
      [<a href="/engs50/Reading/">Reading</a>]
      [<a href="/engs50/Resources/">Resources</a>]
			[<a href="/engs50/Examples/">Examples</a>]
   </nav>

</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post">

  <header class="post-header">
    <h1 class="post-title">Lab 5 - Indexer</h1>
  </header>

  <div class="post-content">
    <p><strong>Due Friday, May 5, at 10pm</strong></p>

<p>In this lab you’ll continue the Tiny Search Engine (TSE) by coding the Indexer and a program for testing a unit that saves and loads index files, according to the <a href="REQUIREMENTS.html">Indexer Requirements Spec</a>.</p>

<ul id="markdown-toc">
  <li><a href="#preparation" id="markdown-toc-preparation">Preparation</a></li>
  <li><a href="#assignment" id="markdown-toc-assignment">Assignment</a>    <ul>
      <li><a href="#whatsubmit" id="markdown-toc-whatsubmit">Submission - what</a></li>
      <li><a href="#howsubmit" id="markdown-toc-howsubmit">Submission - how</a></li>
      <li><a href="#extensions" id="markdown-toc-extensions">Extensions</a></li>
    </ul>
  </li>
  <li><a href="#hints-and-tips" id="markdown-toc-hints-and-tips">Hints and tips</a>    <ul>
      <li><a href="#review-the-lecture-notes" id="markdown-toc-review-the-lecture-notes">Review the lecture notes</a></li>
      <li><a href="#libcs50" id="markdown-toc-libcs50">libcs50</a></li>
      <li><a href="#markdown" id="markdown-toc-markdown">Markdown</a></li>
      <li><a href="#testing" id="markdown-toc-testing">Testing</a></li>
      <li><a href="#use-valgrind-and-gdb" id="markdown-toc-use-valgrind-and-gdb">Use valgrind and gdb</a></li>
      <li><a href="#memory-allocation" id="markdown-toc-memory-allocation">Memory allocation</a></li>
      <li><a href="#hashtable" id="markdown-toc-hashtable">Hashtable</a></li>
      <li><a href="#pagedirectory" id="markdown-toc-pagedirectory">pageDirectory</a></li>
      <li><a href="#index-files" id="markdown-toc-index-files">Index files</a></li>
      <li><a href="#makefile" id="markdown-toc-makefile">Makefile</a></li>
    </ul>
  </li>
</ul>

<h2 id="preparation">Preparation</h2>

<ol>
  <li>
    <p>Start with the same Gitlab project you used for Lab 4.
<em>Before you begin</em>, make sure you submitted Lab 4 correctly: you tagged the submitted version with <code class="highlighter-rouge">lab4submit</code>, <a href="/engs50/Labs/Lab4/#howsubmit">as instructed</a>, and pushed that tag to your Gitlab remote.</p>
  </li>
  <li>
    <p>Check to ensure your local repo is clean with <code class="highlighter-rouge">make clean</code> and everything has been committed and pushed according to <code class="highlighter-rouge">git status</code>.
If you have files that need to be committed, or commits that should be pushed, do that now.
(oops - were those supposed to be part of your Lab 4 submission?
See the first step above.)</p>
  </li>
  <li>
    <p><strong>Do not proceed</strong> if you have uncommitted changes or unpushed commits.
Seek help if you need to sort out your repo and Gitlab.</p>
  </li>
  <li>Pull the updated and additional files from the upstream master (the TSE starter kit) into your local repository:
<code class="highlighter-rouge">git pull upstream master</code>
(this works if you earlier followed the <a href="/05/">instructions from Section meeting</a>).
    <blockquote>
      <p><a href="https://gitlab.cs.dartmouth.edu/CS50/tse/compare/341328cc0ba0501a0f53eabace60a5cdbbd5b762...HEAD">Here</a> you can see the changes that will happen when you run this command - all the changes made to the starter kit since it was released.</p>
    </blockquote>
  </li>
  <li>
    <p>Commit and push your changes; perhaps tag this commit for easy reference later: <code class="highlighter-rouge">git commit -a; git tag lab5start; git push --tags</code>.</p>
  </li>
  <li>Check again to be sure your Gitlab repo is <strong><em>private</em></strong> (not <em>internal</em> or <em>public</em>).
Visit your repo on Gitlab, click on <em>Settings</em>, and scroll down to <em>Project Visibility</em>.</li>
</ol>

<h2 id="assignment">Assignment</h2>

<p>Write the <em>indexer</em>, second sub-system of the Tiny Search Engine.
Please follow the <a href="/engs50/Resources/CodingStyle.html">CS50 coding style guidelines</a> and the <a href="REQUIREMENTS.html">Indexer Requirements Spec</a>, and make good use of our abstract data structures.</p>

<p>Now is a good time to read Section 4 in <em><a href="/engs50/Reading/searchingtheweb.pdf">Searching the Web</a></em>, the paper about search engines.</p>

<ol>
  <li>In the <code class="highlighter-rouge">indexer</code> subdirectory, write
    <ul>
      <li>a program <code class="highlighter-rouge">indexer</code>;</li>
      <li>a program <code class="highlighter-rouge">indextest</code>;</li>
      <li>a short file <code class="highlighter-rouge">README.md</code> to provide any special information about compiling or using your indexer or indextest programs;</li>
      <li>a file <code class="highlighter-rouge">DESIGN.md</code> to provide the Design Spec for indexer (not index tester), drawing inspiration from the <a href="/indexer/">lecture notes</a>;</li>
      <li>a file <code class="highlighter-rouge">IMPLEMENTATION.md</code> to provide the implementation spec and testing plan for indexer (not index tester);</li>
      <li>a file <code class="highlighter-rouge">TESTING.md</code>, telling the grader how you tested your indexer (see <a href="#testing">about testing</a> below);</li>
      <li>a <code class="highlighter-rouge">.gitignore</code> file telling Git to ignore the binary files (libraries, executables) in this directory.</li>
    </ul>
  </li>
  <li>
    <p>Both programs shall leverage common code from <code class="highlighter-rouge">common.a</code> in the <code class="highlighter-rouge">../common</code> directory:</p>

    <ul>
      <li>a module <code class="highlighter-rouge">index.c</code> that contains all the logic for saving and loading index files (this module is common between the Indexer, Querier, and indextest);</li>
      <li>a module <code class="highlighter-rouge">pagedir.c</code> that contains all the logic for saving pages to a crawler output directory, for loading pages from a crawler output directory (this module is common between the Crawler and Indexer);</li>
      <li>(optionally) a module <code class="highlighter-rouge">word.c</code> that implements <code class="highlighter-rouge">NormalizeWord</code> (this module is common between the Indexer and Querier);</li>
      <li>a <code class="highlighter-rouge">Makefile</code> that builds <code class="highlighter-rouge">common.a</code> for use by the programs;</li>
      <li>a short <code class="highlighter-rouge">README.md</code> file explaining how to build <code class="highlighter-rouge">common.a</code>;</li>
      <li>a <code class="highlighter-rouge">.gitignore</code> file telling Git to ignore the binary files (libraries, executables) in this directory.</li>
    </ul>
  </li>
  <li>Review your top-level <code class="highlighter-rouge">README.md</code> and <code class="highlighter-rouge">Makefile</code> to update as needed.</li>
</ol>

<h3 id="whatsubmit">Submission - what</h3>

<p>In this lab you shall edit or add files as described above.
<strong><em>You must arrange your directory like ours, so we can better navigate and test your code.</em></strong>  Of course, you may have additional files - test scripts, test output, code you’ve chosen to break into multiple files.
Here is the solution’s <a href="/engs50/Labs/Lab5/tse-tree.txt">directory structure</a>; it includes some of the optional files and some of the testing files, which may not be present in your solution.
The point is that your code must be organized in the same <em>directory</em> structure.</p>

<p><em>You shall NOT modify any of the code we provide in <code class="highlighter-rouge">libcs50</code></em>.</p>

<p><em>You shall NOT include any data files produced by the crawler or indexer, or any binary/object files produced by the compiler, backup files, core dumps, etc.</em></p>

<h3 id="howsubmit">Submission - how</h3>

<p>When you are ready for final submission,</p>

<ul>
  <li><strong>Add</strong> all required files using an appropriate <code class="highlighter-rouge">git add</code> commandline.</li>
  <li><strong>Commit</strong> all changes using an appropriate <code class="highlighter-rouge">git commit</code> commandline.</li>
  <li><strong>Tag</strong>: <code class="highlighter-rouge">git tag lab5submit</code></li>
  <li><strong>Push</strong>: <code class="highlighter-rouge">git push --tags</code> to ensure the tags are pushed to the remote.
See <a href="/git/tags.html">more about tags</a>.</li>
</ul>

<p>Use your web browser to view your remote on Gitlab and make sure there is a tag <code class="highlighter-rouge">lab5submit</code> and the files associated with that tagged commit include everything we’ll need to grade your lab.</p>

<p>We grade the version tagged <code class="highlighter-rouge">lab5submit</code> so it is safe for you to continue work (e.g., so you can start work on Lab 6), even if you commit or push.</p>

<p>We will clone your repo at 0h, 24h, 48h, and 72h after the original deadline.
We will start grading when we first see one with tag <code class="highlighter-rouge">lab5submit</code>, and judge it late if that tag was added after the deadline.
To avoid confusion, <em>please blitz the team <code class="highlighter-rouge">cs50 AT cs.dartmouth.edu</code> if you want a late submission to be graded instead of your on-time submission.</em></p>

<p><strong><em>Your entire codebase must compile with <code class="highlighter-rouge">make</code> from the top-level directory and produce no compiler warnings.</em></strong>  If we find that your code will not compile, or has <strong>segmentation faults</strong>, we will send it back to you as soon as we can for repair; recall the <a href="/#crashes">grading policy</a>.</p>

<p>We will run your indexer on our own set of test data.</p>

<p>We will run <code class="highlighter-rouge">valgrind</code> on your program to look for memory leaks; you will lose points for memory leaks or memory errors.</p>

<h3 id="extensions">Extensions</h3>

<p>If you want to claim your extension, create a file <code class="highlighter-rouge">EXTENSION</code> at the top-level directory of your repository.
Don’t forget to <code class="highlighter-rouge">git push</code> <em>(before the deadline!)</em> so we will see the file.
For example,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>touch EXTENSION
<span class="nv">$ </span>git add EXTENSION
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"extension request"</span>
<span class="nv">$ </span>git tag lab5submit     <span class="c"># add tag, as above</span>
<span class="nv">$ </span>git push <span class="nt">--tags</span>        <span class="c"># push to gitlab, including tags</span>
</code></pre></div></div>

<p>Use your web browser to view your remote on Gitlab and make sure there is a tag <code class="highlighter-rouge">lab5submit</code> and that its files include <code class="highlighter-rouge">EXTENSION</code>.</p>

<p>When you are ready to submit your code, remove <code class="highlighter-rouge">EXTENSION</code> as follows, <em>update your submission tag</em>, and push to Gitlab:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git rm EXTENSION
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"ready for grading"</span>
<span class="nv">$ </span>git push <span class="nt">--delete</span> origin lab5submit <span class="c"># remove the tag from remote</span>
<span class="nv">$ </span>git tag <span class="nt">-f</span> lab5submit  <span class="c"># move the local tag forward to this commit</span>
<span class="nv">$ </span>git push <span class="nt">--tags</span>        <span class="c"># push to gitlab remote, including tags</span>
</code></pre></div></div>

<p>Use your web browser to view your remote on Gitlab and make sure there is a tag <code class="highlighter-rouge">lab5submit</code>, that its files do <em>not</em> include <code class="highlighter-rouge">EXTENSION</code>, and its files include everything we’ll need to grade your lab.</p>

<h2 id="hints-and-tips">Hints and tips</h2>

<h3 id="review-the-lecture-notes">Review the lecture notes</h3>

<p>There are some design tips in the <a href="/indexer/">lecture notes</a>.
This week’s <a href="/engs50/Reading/#week-6">reading</a> is great too!</p>

<h3 id="libcs50">libcs50</h3>

<p>We provide several modules in the <code class="highlighter-rouge">libcs50</code> directory, which compiles to a library <code class="highlighter-rouge">libcs50.a</code> you can link with your indexer.
<em>You should not change any of our code.</em>
You may drop in your <code class="highlighter-rouge">set.[ch]</code>, <code class="highlighter-rouge">counters.[ch]</code>, <code class="highlighter-rouge">hashtable.[ch]</code> files from Lab 3.
If you’d prefer to use our version of <em>set</em>, <em>counters</em>, and <em>hashtable</em>, that’s totally fine; the starter kit includes a pre-compiled library you can use instead; see <code class="highlighter-rouge">libcs50/README.md</code>.</p>

<p>Most of the modules in this directory are documented with a corresponding Markdown file.</p>

<h3 id="markdown">Markdown</h3>

<p>In this and subsequent labs, you must provide documentation files in Markdown format, that is, you should supply <code class="highlighter-rouge">README.md</code>, <code class="highlighter-rouge">DESIGN.md</code>, <code class="highlighter-rouge">IMPLEMENTATION.md</code>, and <code class="highlighter-rouge">TESTING.md</code>.
The Markdown syntax provides very simple (and readable) markup for headings, lists, italics, bold, and code snippets.
(This course website is written in Markdown.) See <a href="/engs50/Resources/#markdown">Markdown resources</a>.</p>

<h3 id="testing">Testing</h3>

<p>If your crawler never quite worked, never fear!
You do not need a working crawler to write or test your indexer.
Try your indexer on the crawler’s output, which is in <code class="highlighter-rouge">~cs50/demo/crawler-output/</code>.</p>

<p>We recommend that you write a bash script to execute your indexer; you might run that script from a <code class="highlighter-rouge">make test</code> target.
Your <code class="highlighter-rouge">TESTING.md</code> file can name the script and describe what it does.</p>

<p>Because some of our data-structure implementations have unspecified ordering – the order in which data appears when traversing the structure may not be the same as the order items were inserted – the file saved by the index tester may not be literally identical to the file read by that program.
We provide an <a href="/engs50/Labs/Lab5/indexsort.awk"><code class="highlighter-rouge">indexsort.awk</code></a>  script that sorts the index file into a ‘canonical’ ordering, making it possible to compare two index files for their content.</p>

<p>Note that <code class="highlighter-rouge">TESTING.md</code> is different from the ‘Testing plan’, which is a short high-level description written before you code.
<code class="highlighter-rouge">TESTING.md</code> contains (or refers to) results from the tests.
It may refer to other files that contain input to or output from your test runs, or scripts to run the tests; they need not be copied into this file.
(Indeed, your file will be much more readable if you don’t fill it with long scripts or output!)</p>

<h3 id="use-valgrind-and-gdb">Use valgrind and gdb</h3>

<p>In <a href="/debug/">Lecture</a> we learned how to use <code class="highlighter-rouge">valgrind</code> and <code class="highlighter-rouge">gdb</code>; make use of them.</p>

<h3 id="memory-allocation">Memory allocation</h3>

<p>You may find the <code class="highlighter-rouge">memory.c</code> module useful.
Its use is optional, but it is ready to use as part of library <code class="highlighter-rouge">libcs50.a</code>.</p>

<p>In our Lab3 we tried to recover gracefully from memory-allocation failures.
In the TSE application programs, we’ll be a bit more lazy: on NULL return from malloc/calloc you can print an error and exit with non-zero exit status.
(You may find the <code class="highlighter-rouge">assertp()</code> function, defined by the <code class="highlighter-rouge">memory</code> module, to be useful here.)</p>

<h3 id="hashtable">Hashtable</h3>

<p>“How big should the hashtable be?”</p>

<p>In the indexer/querier, we use a hashtable to store an inverted index (words –&gt; documents), and thus the hashtable is keyed by words.
The answer to the above question, then, depends on how many words will be in the index.</p>

<p>When building the inverted index, it’s impossible to know in advance how many words you will find in all those pages encountered by the crawler.
Pick a reasonable size, perhaps something in the range of 200..900 slots.</p>

<p>When loading an inverted index from a file, though, you <em>can</em> know how many words… because there is one word per line in the index file, and it’s easy to count the number of lines (see <code class="highlighter-rouge">file.c</code>).
Once your code can obtain the number of words, think about how it can compute a good size for your hashtable.</p>

<h3 id="pagedirectory">pageDirectory</h3>

<p>Recall that the Crawler fills a directory with saved pages; in Lab 4 we recommended that you also create and leave a file <code class="highlighter-rouge">.crawler</code> in the page directory.
If you followed that advice, you now have a great opportunity!
You might include a function <code class="highlighter-rouge">isCrawlerDirectory(char *dir)</code> in your <code class="highlighter-rouge">pagedir</code> module, which can easily verify whether <code class="highlighter-rouge">dir</code> is indeed a Crawler-produced directory.
If it can open a file <code class="highlighter-rouge">dir/.crawler</code> for reading, then <code class="highlighter-rouge">dir</code> is a Crawler-produced directory; if not, either the <code class="highlighter-rouge">dir</code> is not a valid pathname, not a directory, not a readable directory, it’s not a Crawler produced directory, or some other error - all easily caught by this simple test.</p>

<h3 id="index-files">Index files</h3>

<p>To read each line of the index file, it works well to read the word, then loop calling <code class="highlighter-rouge">fscanf</code> with format <code class="highlighter-rouge">"%d %d "</code> to pull off one pair at a time, checking the return value of <code class="highlighter-rouge">fscanf</code>.</p>

<p>To write the index file, use the <code class="highlighter-rouge">_iterate</code> methods built into your data structures.
(Indeed you may need to have iterators call iterators!) Do <em>not</em> use your <code class="highlighter-rouge">_print</code> methods for this purpose; those are meant for producing pretty human-readable output for debugging purposes.</p>

<p>The functions found in <code class="highlighter-rouge">file.c</code> should be helpful.</p>

<h3 id="makefile">Makefile</h3>

<p>Your <code class="highlighter-rouge">indexer/Makefile</code> needs to build both <code class="highlighter-rouge">indexer</code> and <code class="highlighter-rouge">indextest</code>.
It may be most convenient to add a phony top-most rule:</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">all</span><span class="o">:</span> <span class="nf">indexer indextest</span>
</code></pre></div></div>

<p>so that <code class="highlighter-rouge">make</code> or <code class="highlighter-rouge">make all</code> will build both programs; if you want to build just one, run <code class="highlighter-rouge">make indexer</code> or <code class="highlighter-rouge">make indextest</code>.</p>

<p>You may also find it useful to add phony rules so you can <code class="highlighter-rouge">make test</code> or <code class="highlighter-rouge">make valgrind</code>.</p>

<p>Good luck!</p>

  </div>

</article>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">Engs50 (CS50) -- Dartmouth College</h2>

    <p> <font size=-1>
    	This version of the course is based upon those designed by
    	Professors Palmer, Kotz, Zhou, Campbell, and Balkcom.
	I am deeply indebted to these outstanding educators.
    -- <a href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen Taylor</a>
       </font>
    </p>
    <p><small>This page was last updated on <strong>2018-10-10</strong> at <strong>18:07</strong>.</small></p>
  </div>

</footer>


  </body>

</html>

